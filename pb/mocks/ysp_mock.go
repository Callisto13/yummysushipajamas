// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Callisto13/yummysushipajamas/pb (interfaces: BasicClient,Basic_PrimeServer,Basic_PrimeClient)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	pb "github.com/Callisto13/yummysushipajamas/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockBasicClient is a mock of BasicClient interface
type MockBasicClient struct {
	ctrl     *gomock.Controller
	recorder *MockBasicClientMockRecorder
}

// MockBasicClientMockRecorder is the mock recorder for MockBasicClient
type MockBasicClientMockRecorder struct {
	mock *MockBasicClient
}

// NewMockBasicClient creates a new mock instance
func NewMockBasicClient(ctrl *gomock.Controller) *MockBasicClient {
	mock := &MockBasicClient{ctrl: ctrl}
	mock.recorder = &MockBasicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBasicClient) EXPECT() *MockBasicClientMockRecorder {
	return m.recorder
}

// Prime mocks base method
func (m *MockBasicClient) Prime(arg0 context.Context, arg1 *pb.Req, arg2 ...grpc.CallOption) (pb.Basic_PrimeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prime", varargs...)
	ret0, _ := ret[0].(pb.Basic_PrimeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prime indicates an expected call of Prime
func (mr *MockBasicClientMockRecorder) Prime(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prime", reflect.TypeOf((*MockBasicClient)(nil).Prime), varargs...)
}

// Sum mocks base method
func (m *MockBasicClient) Sum(arg0 context.Context, arg1 *pb.Req, arg2 ...grpc.CallOption) (*pb.Resp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sum", varargs...)
	ret0, _ := ret[0].(*pb.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sum indicates an expected call of Sum
func (mr *MockBasicClientMockRecorder) Sum(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockBasicClient)(nil).Sum), varargs...)
}

// MockBasic_PrimeServer is a mock of Basic_PrimeServer interface
type MockBasic_PrimeServer struct {
	ctrl     *gomock.Controller
	recorder *MockBasic_PrimeServerMockRecorder
}

// MockBasic_PrimeServerMockRecorder is the mock recorder for MockBasic_PrimeServer
type MockBasic_PrimeServerMockRecorder struct {
	mock *MockBasic_PrimeServer
}

// NewMockBasic_PrimeServer creates a new mock instance
func NewMockBasic_PrimeServer(ctrl *gomock.Controller) *MockBasic_PrimeServer {
	mock := &MockBasic_PrimeServer{ctrl: ctrl}
	mock.recorder = &MockBasic_PrimeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBasic_PrimeServer) EXPECT() *MockBasic_PrimeServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockBasic_PrimeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBasic_PrimeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBasic_PrimeServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockBasic_PrimeServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBasic_PrimeServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBasic_PrimeServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockBasic_PrimeServer) Send(arg0 *pb.Resp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBasic_PrimeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBasic_PrimeServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockBasic_PrimeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBasic_PrimeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBasic_PrimeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockBasic_PrimeServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBasic_PrimeServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBasic_PrimeServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockBasic_PrimeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBasic_PrimeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBasic_PrimeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBasic_PrimeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBasic_PrimeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBasic_PrimeServer)(nil).SetTrailer), arg0)
}

// MockBasic_PrimeClient is a mock of Basic_PrimeClient interface
type MockBasic_PrimeClient struct {
	ctrl     *gomock.Controller
	recorder *MockBasic_PrimeClientMockRecorder
}

// MockBasic_PrimeClientMockRecorder is the mock recorder for MockBasic_PrimeClient
type MockBasic_PrimeClientMockRecorder struct {
	mock *MockBasic_PrimeClient
}

// NewMockBasic_PrimeClient creates a new mock instance
func NewMockBasic_PrimeClient(ctrl *gomock.Controller) *MockBasic_PrimeClient {
	mock := &MockBasic_PrimeClient{ctrl: ctrl}
	mock.recorder = &MockBasic_PrimeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBasic_PrimeClient) EXPECT() *MockBasic_PrimeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockBasic_PrimeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBasic_PrimeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBasic_PrimeClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBasic_PrimeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBasic_PrimeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBasic_PrimeClient)(nil).Context))
}

// Header mocks base method
func (m *MockBasic_PrimeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBasic_PrimeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBasic_PrimeClient)(nil).Header))
}

// Recv mocks base method
func (m *MockBasic_PrimeClient) Recv() (*pb.Resp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.Resp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBasic_PrimeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBasic_PrimeClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockBasic_PrimeClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBasic_PrimeClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBasic_PrimeClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockBasic_PrimeClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBasic_PrimeClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBasic_PrimeClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockBasic_PrimeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBasic_PrimeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBasic_PrimeClient)(nil).Trailer))
}
